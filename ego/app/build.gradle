import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

def buildTime() {
    def df = new SimpleDateFormat("MMdd.HH:mm") // you can change it
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    df.format(new Date())
}

def quote(String text) {
    "\"$text\""
}



android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"


    // 默认编译配置
    defaultConfig {
        buildConfigField "String", "BUILD_TIME", quote(buildTime())
        applicationId "a.m.a.s.ego"
        manifestPlaceholders = [hostName:"www.example.com"]
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        // 设置默认的APK命名方式
        //setProperty("archivesBaseName", "ego_${versionName}_${versionCode}_${versionCode}@${buildTime()}")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            minifyEnabled false
            buildConfigField "String", "BUILD_TYPE_INNER", "String.format(\"BUILD_%d\", 1)"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug{
            buildConfigField "String", "BUILD_TYPE_INNER", "String.format(\"BUILD_%d\", 2)"
            minifyEnabled false
            debuggable true
            zipAlignEnabled=false
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
        }
    }

    signingConfigs {
        release {
            storeFile file("myreleasekey.keystore")
            storePassword "password"
            keyAlias "MyReleaseKey"
            keyPassword "password"
        }
    }

    sourceSets {
        main {
            // 这里可以自定义资各种目录的位置,目前只是简单的打印一下
            println "manifest.srcFile="+manifest.srcFile
            println "manifest.properties="+manifest.properties
            println "java.srcDirs="+java.srcDirs
            println "res.srcDirs="+res.srcDirs
            println "aidl.srcDirs="+aidl.srcDirs
            println "allprojects.properties="+allprojects.properties
        }
    }

    /* AAPT */
    aaptOptions {
        cruncherEnabled false // 可以加快编译速度, 但是因为不能在flavors中使用,所以在release的时候需要手动设置成true
    }

    /* DEX  */
    dexOptions {
        incremental true
        preDexLibraries true
        javaMaxHeapSize "4g"
        jumboMode true
    }

    /* LINT */
    lintOptions {
        warning 'WrongViewCast', 'MissingTranslation'
        abortOnError false
    }

    /* FLAVORS */
    productFlavors {
        cn {
            buildConfigField "String", "_FLAVOR", "\"" + getName() + "\""
            manifestPlaceholders = [hostName:"www.example.cn"]
            // 只保留指定的资源
            resConfigs "cn"
            println "LET'T BUILD CN ..."
//            applicationId "a.m.a.s.ego_cn"
            versionName "cn_1.0"
            //applicationIdSuffix ".cn"              // 为了简单,可以直接定义APPID的后缀
            applicationIdSuffix "."+getName()        // 或者直接使用 name 变量
            versionNameSuffix "-cn"                  // 打包出来的APK文件名中有所区分
            println getBuildDir()
        }

        en {
            buildConfigField "String", "_FLAVOR", "\"" + getName() + "\""
            manifestPlaceholders = [hostName:"www.example.en"]
            resConfigs "en"
//            applicationId "a.m.a.s.ego_en"
            versionName "en_1.0"
            applicationIdSuffix ".en"
            versionNameSuffix "-en"
        }

        dev {
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
    }
    // 设置需要过滤的flavors
    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("dev")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
//            def project = "myProject"
//            def SEP = "_"
//            def flavor = variant.productFlavors[0].name
//            def buildType = variant.variantData.variantConfiguration.buildType.name
//            def version = variant.versionName
//            def date = new Date();
//            def formattedDate = date.format('ddMMyy_HHmm')
//            def newApkName = project + SEP + flavor + SEP + buildType + SEP + version + SEP + formattedDate + ".apk"
            //output.outputFile = new File(output.outputFile.parent, newApkName)
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2' // 引入constraint view
    compile project(':libjava')    // include module :libjava
    testCompile 'junit:junit:4.12'


    // DEBUG的时候会引入:lib_cn
    //debugCompile project(':lib_cn')
    //enCompile project(':lib_cn')
}



project.afterEvaluate {
    android.applicationVariants.each { variant ->
        println "=========== GAME OVER ============"
        println "${variant.name} : ${variant.buildType.name}"
    }
}


/* --------------------------- */
/* GRADLE & GROOVY PLAY GROUND */
/* --------------------------- */

def add = {
    a,b -> a+b
}


task hello {
    description "This is myTask"
    doFirst {
        println "[START]"
    }

    doLast {
        println "[END  ]"
    }
//    println "DOING :" + name
//    println "dependsOn" + dependsOn
}

String hello() {
    "hello"
}

/**
 * A SIMPLE GROOVY DEMOS
 */
task helloGroovy << {
    def map = [:]
    map."A" = 1
    map."B" = 2


    def xs = [1,2,3]
    xs << 4
    xs << 5
    xs << 6
    println xs

    def max = 3
    max.times {
        println "[$it] IN TASK HELLOGROOVY : A=${map."A"} & ${xs[-1]}"
    }

    3.upto(6) {
        println "[$it]"
    }

    // step <to> <step>
    6.step 12, 2, {
        println "[$it]"
    }

    (13..15).each {
        println "[$it]"
    }

    for(x in 100..110) {
        println "[$x]"
    }

    for(x in ['a','b','c']) {
        println "[$x]"
    }

    map=["A":1, "B":2, "C":3]
    for(x in map) {
        println "$x.key=$x.value"
    }


    // function
    println hello    // task ':app:hello'
    println quote(hello())  // hello

    //
    assert 1 == 1
    // assert 1 == 2 /* THIS WILL CASE ERROR */

    // String Interpolation
    println "${hello()}: 1+1=${1+1}"
    def person = [name: 'ZHOU', age: 36]
    println "$person.name is $person.age years old!"

    println "${add 100, 30}"

}
